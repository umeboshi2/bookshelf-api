// Generated by CoffeeScript 1.12.6
'use strict';
var HowhapList, asyncfun, awaitfun;

HowhapList = require('howhap-list');

asyncfun = require('asyncawait/async');

awaitfun = require('asyncawait/await');

module.exports = asyncfun(function(req, res, urlPieces, model, config) {
  var direction, fetchCollection, fetchParams, hasTimestamps, list, orderExpression, promise, total, totalClone;
  promise = model;
  list = new HowhapList(null, {
    availableErrors: config.errors
  });
  hasTimestamps = null;
  if (model.hasTimestamps === false) {
    hasTimestamps = [];
  } else {
    hasTimestamps = model.hasTimestamps;
  }
  if (typeof hasTimestamps === 'boolean') {
    hasTimestamps = ['created_at', 'updated_at'];
  }
  if (hasTimestamps.indexOf(config.deletedAttribute) !== -1) {
    promise = promise.where(config.deletedAttribute, null);
  }
  fetchParams = {};
  if (req.query && Array.isArray(req.query.withRelated)) {
    fetchParams.withRelated = req.query.withRelated;
  }
  fetchCollection = void 0;
  if (urlPieces.length > 1) {
    fetchCollection = false;
    promise = promise.fetch(fetchParams);
  } else {
    fetchCollection = true;
    if (req.query) {
      if (req.query.columns) {
        fetchParams.columns = req.query.columns;
      }
      if (req.query.where) {
        if (Array.isArray(req.query.where)) {
          promise = promise.where.apply(promise, req.query.where);
        } else if (Object.prototype.toString.call(req.query.where) === '[object Object]') {
          promise = promise.where(req.query.where);
        }
      }
      if (req.query.distinct) {
        promise = promise.query('distinct', req.query.distinct);
      }
      totalClone = promise.clone();
      if (req.query.distinct) {
        totalClone = totalClone.query('groupBy', req.query.distinct);
      }
      total = awaitfun(totalClone.count());
      if (req.query.sort || req.query.offset) {
        direction = req.query.direction || 'ASC';
        direction = direction.toLowerCase();
        if (Array.isArray(req.query.sort)) {
          orderExpression = [];
          req.query.sort.forEach(function(col) {
            return orderExpression.push(col + " " + direction);
          });
          promise = promise.query('orderByRaw', orderExpression.join(', '));
        } else {
          promise = promise.query('orderBy', req.query.sort, direction);
        }
      }
      if (req.query.offset) {
        promise = promise.query('offset', req.query.offset);
      }
      if (req.query.limit) {
        promise = promise.query('limit', req.query.limit);
      }
    }
    promise = promise.fetchAll(fetchParams);
  }
  return promise.then(function(results) {
    var data;
    if (!results) {
      list.add('RECORD_NOT_FOUND', {
        model: urlPieces[0],
        id: urlPieces[1]
      });
      res.status(config.errors.RECORD_NOT_FOUND.status).json(list.toObject());
    } else {
      if (fetchCollection) {
        data = {
          total: total,
          items: results.toJSON()
        };
      } else {
        data = results.toJSON();
      }
      res.json(data);
    }
  })["catch"](function(err) {
    list.add('RECORD_NOT_FOUND', {
      error: err.toString()
    });
    res.status(config.errors.UNKNOWN.status).json(list.toObject());
  }).then(function() {
    return Promise.resolve({
      urlPieces: urlPieces,
      model: model
    });
  });
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/freespace/home/umeboshi/workspace/bookshelf-api/src/get.coffee